
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000015a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000e6  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800100  00800100  0000015a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000015a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000018c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  000001cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000068b  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000607  00000000  00000000  00000877  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000216  00000000  00000000  00000e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  00001094  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000035b  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001413  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a1 30       	cpi	r26, 0x01	; 1
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 48 00 	call	0x90	; 0x90 <main>
  88:	0c 94 71 00 	jmp	0xe2	; 0xe2 <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <main>:

#include <util/delay.h>
unsigned char i=0;
int main()
 {
	 DDRB=0xFF;
  90:	8f ef       	ldi	r24, 0xFF	; 255
  92:	84 b9       	out	0x04, r24	; 4
	 DDRC=0x00;
  94:	17 b8       	out	0x07, r1	; 7
	 PORTB=0x00;
  96:	15 b8       	out	0x05, r1	; 5
			 i++;
			 while ((PINC & (1<<0))==0);
		 }
		 if ((PINC & (1<<1))==0)
		 {
			 PORTB=(((i/10)<<4)|(i%10));
  98:	4d ec       	ldi	r20, 0xCD	; 205
	 DDRB=0xFF;
	 DDRC=0x00;
	 PORTB=0x00;
	 while(1)
	 {
		 if ((PINC & (1<<0))==0)
  9a:	30 99       	sbic	0x06, 0	; 6
  9c:	07 c0       	rjmp	.+14     	; 0xac <main+0x1c>
		 { 
			 i++;
  9e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
  a2:	8f 5f       	subi	r24, 0xFF	; 255
  a4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
			 while ((PINC & (1<<0))==0);
  a8:	30 9b       	sbis	0x06, 0	; 6
  aa:	fe cf       	rjmp	.-4      	; 0xa8 <main+0x18>
		 }
		 if ((PINC & (1<<1))==0)
  ac:	31 99       	sbic	0x06, 1	; 6
  ae:	f5 cf       	rjmp	.-22     	; 0x9a <main+0xa>
		 {
			 PORTB=(((i/10)<<4)|(i%10));
  b0:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <_edata>
  b4:	94 9f       	mul	r25, r20
  b6:	81 2d       	mov	r24, r1
  b8:	11 24       	eor	r1, r1
  ba:	86 95       	lsr	r24
  bc:	86 95       	lsr	r24
  be:	86 95       	lsr	r24
  c0:	50 e1       	ldi	r21, 0x10	; 16
  c2:	85 9f       	mul	r24, r21
  c4:	90 01       	movw	r18, r0
  c6:	11 24       	eor	r1, r1
  c8:	88 0f       	add	r24, r24
  ca:	38 2f       	mov	r19, r24
  cc:	33 0f       	add	r19, r19
  ce:	33 0f       	add	r19, r19
  d0:	83 0f       	add	r24, r19
  d2:	98 1b       	sub	r25, r24
  d4:	92 2b       	or	r25, r18
  d6:	95 b9       	out	0x05, r25	; 5
	 while ((PINC & (1<<1))==0);
  d8:	31 9b       	sbis	0x06, 1	; 6
  da:	fe cf       	rjmp	.-4      	; 0xd8 <main+0x48>
	 i=0;
  dc:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
  e0:	dc cf       	rjmp	.-72     	; 0x9a <main+0xa>

000000e2 <_exit>:
  e2:	f8 94       	cli

000000e4 <__stop_program>:
  e4:	ff cf       	rjmp	.-2      	; 0xe4 <__stop_program>
